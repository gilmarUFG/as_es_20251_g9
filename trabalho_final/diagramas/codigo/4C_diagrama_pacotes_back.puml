@startuml backend_package
!theme C4_blue from https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/themes
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Package Diagram for App Mobile (Back-End) - Atualizado

Container_Boundary(backend, "Backend API") {
  package "Controllers" {
    Component(userController, "UserController", "MVC REST controller", "Rotas relacionadas ao usuário")
    Component(goalsController, "GoalsController", "MVC REST controller", "Rotas relacionadas às metas")
    Component(notificationController, "NotificationController", "MVC REST controller", "Rotas de notificações")
    Component(locationsController, "LocationsController", "MVC REST controller", "Rotas de localização")
    Component(rankingController, "RankingController", "MVC REST controller", "Rotas relacionadas ao ranking de sustentabilidade")
    Component(forumController, "ForumController", "MVC REST controller", "Rotas relacionadas ao fórum comunitário")
    Component(ecommerceController, "EcommerceController", "MVC REST controller", "Rotas relacionadas aos produtos sustentáveis")
    Component(sustainablePracticeController, "SustainablePracticeController", "MVC REST controller", "Rotas relacionadas ao registro de práticas sustentáveis")
  }

  package "Services" {
    Component(userService, "UserService", "Application service", "Lógica de usuário")
    Component(goalsService, "GoalsService", "Application service", "Lógica de metas")
    Component(notificationService, "NotificationService", "Application service", "Lógica de notificações e envio de push")
    Component(locationsService, "LocationsService", "Application service", "Lógica de ecopontos")
    Component(rankingService, "RankingService", "Application service", "Lógica de ranking de sustentabilidade")
    Component(forumService, "ForumService", "Application service", "Lógica de fórum comunitário")
    Component(ecommerceService, "EcommerceService", "Application service", "Lógica de produtos sustentáveis")
    Component(sustainablePracticeService, "SustainablePracticeService", "Application service", "Lógica de práticas sustentáveis e cálculos de impacto")
  }

  package "Repositories" {
    Component(userRepo, "UserRepository", "MongoDB repository", "Opera sobre coleção de usuários")
    Component(goalsRepo, "GoalsRepository", "MongoDB repository", "Opera sobre coleção de metas")
    Component(notificationRepo, "NotificationRepository", "MongoDB repository", "Opera sobre coleção de notificações")
    Component(locationsRepo, "LocationsRepository", "MongoDB repository", "Opera sobre coleção de localizações")
    Component(rankingRepo, "RankingRepository", "MongoDB repository", "Opera sobre coleção de rankings")
    Component(forumRepo, "ForumRepository", "MongoDB repository", "Opera sobre coleção de mensagens do fórum")
    Component(ecommerceRepo, "EcommerceRepository", "MongoDB repository", "Opera sobre coleção de produtos")
    Component(sustainablePracticeRepo, "SustainablePracticeRepository", "MongoDB repository", "Opera sobre coleção de práticas sustentáveis")
  }

  package "Domain Models" {
    Component(userModel, "User", "Domain entity", "Usuário")
    Component(goalModel, "Goal", "Domain entity", "Meta de consumo")
    Component(notificationModel, "Notification", "Domain entity", "Notificação")
    Component(locationModel, "Location", "Domain entity", "Ecoponto")
    Component(rankingModel, "Ranking", "Domain entity", "Ranking de sustentabilidade")
    Component(forumModel, "ForumMessage", "Domain entity", "Mensagem do fórum")
    Component(productModel, "Product", "Domain entity", "Produto sustentável")
    Component(practiceModel, "SustainablePractice", "Domain entity", "Prática sustentável realizada")
  }

  package "Config & External" {
    System_Ext(pns, "PNS (FCM/APNs)", "Sistema de push")
    System_Ext(municipalSystems, "APIs de Sistemas Municipais", "Informações sobre ecopontos")
    System_Ext(mapApis, "APIs de Mapas", "Exibição e localização de pontos de coleta")
    System_Ext(ecommerceExt, "E-commerce Ext.", "APIs de plataformas de produtos sustentáveis")
    Component(dbConfig, "DatabaseConfig", "Config & util", "Conexão MongoDB")
    Component(msgConfig, "MessagingConfig", "Config & util", "Configurações de FCM / APNs")
  }
}

ContainerDb(db, "Banco de Dados", "MongoDB", "Armazena as coleções de dados", $sprite="mongodb")

'Controllers -> Services'
userController --> userService : "usa"
goalsController --> goalsService : "usa"
notificationController --> notificationService : "usa"
locationsController --> locationsService : "usa"
rankingController --> rankingService : "usa"
forumController --> forumService : "usa"
ecommerceController --> ecommerceService : "usa"
sustainablePracticeController --> sustainablePracticeService : "usa"

'Services -> Repositories'
userService --> userRepo : "usa"
goalsService --> goalsRepo : "usa"
notificationService --> notificationRepo : "usa"
locationsService --> locationsRepo : "usa"
rankingService --> rankingRepo : "usa"
forumService --> forumRepo : "usa"
ecommerceService --> ecommerceRepo : "usa"
sustainablePracticeService --> sustainablePracticeRepo : "usa"

'Repositories -> Database'
userRepo --> db : "Driver MongoDB"
goalsRepo --> db : "Driver MongoDB"
notificationRepo --> db : "Driver MongoDB"
locationsRepo --> db : "Driver MongoDB"
rankingRepo --> db : "Driver MongoDB"
forumRepo --> db : "Driver MongoDB"
ecommerceRepo --> db : "Driver MongoDB"
sustainablePracticeRepo --> db : "Driver MongoDB"

'External Interactions'
notificationService --> pns : "envia push"
locationsService --> municipalSystems : "consulta dados sobre ecopontos"
locationsService --> mapApis : "consulta coordenadas geográficas"
ecommerceService --> ecommerceExt : "consulta produtos"

@enduml